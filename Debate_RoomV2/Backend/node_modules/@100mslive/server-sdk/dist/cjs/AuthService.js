"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthService = void 0;
const jsonwebtoken_1 = require("jsonwebtoken");
const uuid_1 = require("uuid");
class AuthService {
    constructor(accessKey, secret) {
        this.accessKey = accessKey;
        this.secret = secret;
    }
    getManagementToken({ issuedAt, notValidBefore, validForSeconds } = {
        validForSeconds: 24 * 3600,
    }) {
        return __awaiter(this, void 0, void 0, function* () {
            const jwtid = (0, uuid_1.v4)();
            const currTimeSeconds = Math.floor(Date.now() / 1000);
            const iat = issuedAt || currTimeSeconds;
            const nbf = notValidBefore || currTimeSeconds;
            const tokenPromise = new Promise((resolve, reject) => {
                (0, jsonwebtoken_1.sign)({
                    access_key: this.accessKey,
                    type: "management",
                    version: 2,
                    iat,
                    nbf,
                    exp: nbf + validForSeconds,
                }, this.secret, {
                    algorithm: "HS256",
                    jwtid,
                }, function (err, token) {
                    if (err || !token) {
                        reject(err);
                    }
                    else {
                        resolve(token);
                    }
                });
            });
            const tokenString = yield tokenPromise;
            return { token: tokenString };
        });
    }
}
exports.AuthService = AuthService;
//# sourceMappingURL=AuthService.js.map